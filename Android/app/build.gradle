apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'realm-android'
apply plugin: 'kotlin-android-extensions'

realm {
    syncEnabled = true
}

android {
    compileSdkVersion 26
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "realm.io.realmpop"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
    }

    lintOptions {
        lintOptions {
            warning 'InvalidPackage'
            disable 'GoogleAppIndexingWarning'
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            storeFile file("realmpop.jks")
            storePassword "realmpop"
            keyAlias "realmpop"
            keyPassword "realmpop"
        }
    }

    buildTypes {

        def host = '45.55.81.82' //getIP()

        debug {
            // This will automatically detect the IP address of the machine building RealmTasks.
            // It is assumed that this machine is also running the Object Server.
            // If not, replace 'host' with the IP of the machine hosting the server.
            buildConfigField "String", "DEFAULT_OBJECT_SERVER_IP", "\"${host}\""
            resValue "string", "defaultObjectServerIp", "${host}"
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // This will automatically detect the IP address of the machine building RealmTasks.
            // It is assumed that this machine is also running the Object Server.
            // If not, replace 'host' with the IP of the machine hosting the server.
            buildConfigField "String", "DEFAULT_OBJECT_SERVER_IP", "\"${host}\""
            resValue "string", "defaultObjectServerIp", "${host}"
        }
    }
}

dependencies {
    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:recyclerview-v7:$support_version"
    compile "com.android.support:cardview-v7:$support_version"
    compile "com.android.support:design:$support_version"
    compile "android.arch.lifecycle:runtime:$arch_version"
    compile "android.arch.lifecycle:extensions:$arch_version"
    annotationProcessor "android.arch.lifecycle:compiler:$arch_version"

    kapt "com.android.databinding:compiler:$android_plugin_version"

    compile 'io.realm:android-adapters:2.1.0'

    compile 'uk.co.chrisjenx:calligraphy:2.2.0'

    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'com.jakewharton.rxbinding:rxbinding:0.3.0'

    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    compile 'com.jakewharton:butterknife:8.5.1'

    testCompile 'junit:junit:4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    compile "org.jetbrains.anko:anko-commons:$anko_version"
}

kapt {
    generateStubs = true
}

repositories {
    mavenCentral()
}

static getIP() {
    InetAddress result = null;
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses();
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement();
            if (!address.isLoopbackAddress()) {
                if (address.isSiteLocalAddress()) {
                    return address.getHostAddress();
                } else if (result == null) {
                    result = address;
                }
            }
        }
    }
    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress();
}
